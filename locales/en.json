{
    "startProcess": ">>> Starting monorepo creation process...",
    "gatherConfig": "\nGathering project configuration...",
    "promptProjectName": "What is the project directory name? (Leave empty for current directory)",
    "promptDbType": "Select database type:",
    "promptDbHost": "Database host:",
    "promptDbUser": "Database username:",
    "errorDbUserEmpty": "Username cannot be empty.",
    "promptDbPassword": "Database password:",
    "promptDbName": "Database name:",
    "errorDbNameEmpty": "Database name cannot be empty.",
    "promptDbPort": "Database port:",
    "errorDbPortInvalid": "Please enter a valid port number.",
    "promptAuthProviders": "Select authentication providers (space to select, enter to confirm):",
    "promptDbInitType": "How should the database be initialized?",
    "promptSeedUserCount": "How many sample users should be created?",
    "errorSeedUserCountInvalid": "Please enter a valid non-negative integer (0 or more).",
    "promptPackageManager": "Which package manager should be used?",
    "configSummary": "\n--- Configuration Summary ---",
    "configEnd": "---------------------------\n",
    "prepareDir": "Preparing target directory...",
    "targetDirInfo": "Target directory will be: {targetDir}",
    "dirExistsNotEmptyError": "Directory \"{projectName}\" already exists and is not empty. Please choose a different name or clear the directory.",
    "dirExistsEmptyWarning": "Directory \"{projectName}\" already exists but is empty. Proceeding...",
    "dirCreated": "Created directory: {targetDir}",
    "useCurrentDir": "Using current directory: {targetDir}",
    "currentDirNotEmptyError": "Current directory is not empty. Please run the command in an empty directory or specify a project name.",
    "currentDirEmptyWarning": "Current directory is empty or contains only hidden files. Proceeding...",
    "cloningRepo": "\nCloning monorepo from {repoUrl} into {targetDir}...",
    "cloningSuccess": "Monorepo cloned successfully.",
    "removingGit": "Removing .git directory from the cloned repo...",
    "removeGitSuccess": ".git directory removed.",
    "errorCloning": "Failed to clone repository: {error}",
    "createDbConfig": "\nCreating database configuration file...",
    "createDbConfigSuccess": "Successfully created {envFilePath}",
    "errorCreateDbConfig": "Failed to create .env.database.local: {error}",
    "installDeps": "\nInstalling dependencies using {packageManager}... This might take a few minutes.",
    "installDepsSuccess": "Dependencies installed successfully.",
    "errorInstallDeps": "Failed to install dependencies with {packageManager}: {error}",
    "runDbInit": "\nRunning database initialization script ({dbInitType})...",
    "executingCommand": "Executing: {command}",
    "dbInitSuccess": "Database initialization script executed successfully.",
    "errorDbInit": "Failed to execute database script ({command}): {error}",
    "skipDbInit": "\nSkipping database initialization as per selection.",
    "setupComplete": "\n✅ Monorepo setup completed successfully!",
    "versionOptionDesc": "output the current version number",
    "helpOptionDesc": "display help for this command",
    "errorDuringSetup": "\n❌ An error occurred during setup:",
    "attemptingCleanup": "\nAttempting to clean up created directory: {targetDir}",
    "cleanupSuccess": "Cleanup successful.",
    "cleanupFailed": "Cleanup failed: {error}",
    "unknownLangWarning": "Warning: Unknown language '{lang}' specified. Falling back to default language '{defaultLang}'.",
    "langOptionDesc": "specify the language for the CLI",
    "cliDescription": "CLI tool to initialize a monorepo project",
    "dbInitChoiceNone": "None (Skip database initialization)",
    "dbInitChoiceSql": "SQL File Based (Run db:restore)",
    "dbInitChoiceSeed": "Seed Process (Run db:seed with sample data)",
    "promptUseDocker": "Use Docker to start project services (requires Docker Desktop/Service to be running)?",
    "copyWebEnv": "Copying web environment config...",
    "copyWebEnvSuccess": "Successfully copied {src} to {dest}",
    "errorCopyWebEnv": "Warning: Failed to copy {src} to {dest}: {error}",
    "runDockerStart": "\nStarting Docker services...",
    "dockerStartSuccess": "Docker services started successfully.",
    "errorDockerStart": "Error starting Docker services: {error}",
    "waiting": "⏳"
}
